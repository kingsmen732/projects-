#include "esp_http_server.h"
#include "esp_camera.h"
#include <WiFi.h>
#include "Arduino.h"

const char* ssid = "your wifi credentials";
const char* password = "your wifi password";

//Select a sensible image size for image to avoid overloading camera/wifi etc
//#define TIMELAPSE_FRAMESIZE FRAMESIZE_QQVGA    // 160x120
//#define TIMELAPSE_FRAMESIZE FRAMESIZE_QQVGA2   // 128x160
//#define TIMELAPSE_FRAMESIZE FRAMESIZE_QCIF     // 176x144
//#define TIMELAPSE_FRAMESIZE FRAMESIZE_HQVGA    // 240x176
//#define TIMELAPSE_FRAMESIZE FRAMESIZE_QVGA     // 320x240
//#define TIMELAPSE_FRAMESIZE FRAMESIZE_CIF      // 400x296
//#define TIMELAPSE_FRAMESIZE FRAMESIZE_VGA      // 640x480
//#define TIMELAPSE_FRAMESIZE FRAMESIZE_SVGA     // 800x600
#define TIMELAPSE_FRAMESIZE FRAMESIZE_XGA        // 1024x768
//#define TIMELAPSE_FRAMESIZE FRAMESIZE_SXGA     // 1280x1024
//#define TIMELAPSE_FRAMESIZE FRAMESIZE_UXGA     // 1600x1200
//#define TIMELAPSE_FRAMESIZE FRAMESIZE_QXGA     // 2048*1536


#define index_html_gz_len 3663
// view source in browser to see HTML. See Editing ESP32 HTML tutorial for how to edit.
const uint8_t index_html_gz[] = {
0x1f,0x8b,0x08,0x00,0x97,0xa1,0xb9,0x5c,0x00,0xff,0x7d,0x54,0x61,0x8f,0xe2,0x36,0x10,0xfd,0x4c,0x7e,0xc5,0x34,0x3a,0x29,0x49,0x0f,0x08,0x5c,0x45,0x55,0xdd,0x26,0xa9,0xda,0x05,0xb5,0x54,0xcb,0xde,0xa9,0xcb,0xb7,0xaa,0xea,0x79,0xed,0x21,0xb8,0xe7,0xd8,0x69,0xec,0x84,0xa2,0x15,0xff,0xfd,0xc6,0x49,0x38,0xd1,0xaa,0x57,0x21,0x11,0x87,0x79,0x7e,0xf3,0x66,0xe6,0x0d,0xd9,0x57,0xc2,0x70,0x77,0xae,0x11,0x8e,0xae,0x52,0x45,0x90,0x5d,0x1f,0xc8,0x04,0x3d,0x2a,0x74,0x0c,0xf8,0x91,0x35,0x16,0x5d,0x1e,0xb6,0xee,0x30,0xfb,0x2e,0xbc,0xfe,0xac,0x59,0x85,0x79,0xd8,0x49,0x3c,0xd5,0xa6,0x71,0x21,0x70,0xa3,0x1d,0x6a,0x82,0x9d,0xa4,0x70,0xc7,0x5c,0x60,0x27,0x39,0xce,0xfa,0x97,0xa9,0xd4,0xd2,0x49,0xa6,0x66,0x96,0x33,0x85,0xf9,0xd2,0x73,0x38,0xe9,0x14,0x16,0xbf,0xb0,0x8e,0x3d,0xf1,0x46,0xd6,0x0e,0xb6,0x15,0x2b,0xd1,0x66,0xe9,0x10,0x08,0xb2,0x74,0xd4,0xf0,0x6c,0xc4,0xb9,0x08,0x7e,0xdd,0xdc,0xbf,0xdb,0xed,0x36,0x8f,0xeb,0xcd,0x1a,0x9e,0x36,0xfb,0xfd,0xf6,0xf1,0xa7,0xa7,0xb7,0xd9,0x73,0x53,0x04,0x6f,0xc0,0x22,0xe5,0x16,0x16,0x66,0xf0,0x1e,0x4d,0xad,0x10,0x4e,0x4c,0x7d,0x94,0xba,0x04,0x61,0x4e,0x1a,0xdc,0x11,0xc1,0xba,0x06,0xd1,0xf5,0xf0,0x6f,0x6e,0xe0,0xf7,0xca,0xb4,0x74,0xa8,0x4c,0xe7,0xd1,0x1d,0x36,0x67,0x38,0x30,0x3b,0xe0,0x56,0x5f,0xc4,0x69,0xd3,0x54,0x4c,0xa9,0x73,0x0f,0x5b,0x2e,0xfe,0x9f,0xcf,0x2a,0x73,0x1a,0xa1,0x6f,0x6e,0xa1,0x8f,0xb2,0x3c,0x3a,0x50,0x8c,0xde,0x38,0xab,0xd1,0x4e,0x49,0x23,0xb5,0x79,0x4a,0x97,0x8d,0x1e,0x84,0xde,0xc2,0xdf,0x33,0x77,0x04,0x73,0x18,0x8a,0x69,0x35,0x18,0x0d,0x34,0x18,0x85,0xac,0x01,0xc1,0x06,0xfa,0xfe,0x6b,0xcf,0x3e,0x22,0x45,0x6a,0xc9,0x5d,0xdb,0x20,0xa0,0xd7,0xf0,0x16,0x32,0x5b,0x33,0x0d,0x52,0xe4,0xe1,0xc8,0x18,0x16,0xab,0x2c,0xf5,0x3f,0x16,0xd7,0x1c,0x03,0x85,0xd4,0x75,0xeb,0xc0,0xfb,0x21,0x0f,0x1b,0xa6,0x4b,0x0c,0xa1,0x92,0x3a,0x0f,0x97,0xf4,0x64,0x7f,0xe7,0xe1,0xb7,0x8b,0x10,0x3a,0xa6,0x5a,0x0a,0xaf,0x42,0x48,0xe9,0x86,0x90,0x5d,0x4f,0x2c,0xfd,0xf4,0x66,0xde,0x03,0x4c,0x6a,0x6c,0xc2,0x22,0x4b,0x29,0x44,0x00,0xdb,0x4f,0xb7,0x08,0xc8,0x67,0x6d,0x45,0xfe,0x98,0x33,0x21,0x36,0x1d,0x1d,0x1e,0xa4,0x25,0xbf,0x60,0x13,0x47,0xeb,0x77,0xbb,0xfb,0xc1,0x3c,0x0f,0x86,0x09,0x14,0xd1,0x14,0x0e,0xad,0xe6,0x4e,0x1a,0x1d,0x27,0xf0,0x12,0x4c,0x3a,0x2a,0x93,0x43,0x4e,0xf3,0x1c,0x39,0x94,0xe1,0xcc,0x87,0xe7,0xa6,0x91,0xa5,0xd4,0x77,0xc1,0x84,0x32,0x5b,0x07,0xf2,0x1f,0xa8,0x12,0xdd,0x46,0xa1,0x3f,0xfe,0x78,0xde,0x8a,0x38,0xfa,0x97,0xc6,0x28,0xb9,0x9b,0x04,0xf4,0xf1,0xec,0x4e,0x52,0x9d,0x25,0x5d,0x5e,0x2d,0x16,0x8b,0xbb,0x20,0x98,0x5c,0x05,0x80,0x32,0xa6,0x1e,0x54,0x00,0xd1,0xcf,0xa5,0xb6,0xd8,0xb8,0x1f,0xc4,0x9f,0x8c,0x13,0xef,0xcf,0xfb,0xdd,0x43,0x1c,0x3d,0xe3,0xc1,0x90,0xbf,0x34,0x09,0x8f,0x32,0x59,0x95,0x60,0x1b,0x9e,0x87,0xd1,0xeb,0x0f,0xaf,0x5e,0xf8,0x25,0xa5,0xf1,0xfa,0x59,0x7c,0xff,0x07,0x7f,0xce,0x5f,0xbd,0xac,0x99,0xc3,0xb9,0x36,0xa7,0x38,0xb9,0x7c,0x78,0x1d,0x85,0x45,0x94,0x78,0xe2,0x93,0xd4,0xe4,0xd5,0x39,0x6d,0xd9,0x5e,0x56,0x68,0x5a,0x17,0xfb,0xb4,0xd3,0x51,0x56,0x42,0xf5,0x5d,0xbc,0xd2,0xcf,0x95,0xfd,0xd5,0xd2,0x5c,0x9f,0x50,0x21,0x77,0x86,0x1a,0xd8,0x8f,0xed,0xb7,0xdb,0xb1,0xfd,0x1e,0x25,0xff,0xd1,0x68,0xda,0x64,0x0a,0xde,0xb4,0x17,0x62,0x1c,0x4b,0xfb,0xdc,0x80,0xda,0x2f,0xfb,0x56,0xbb,0xd8,0x1d,0xa5,0x9d,0xf7,0xc3,0x4e,0xbe,0x5e,0xf6,0x5d,0x21,0xd8,0x17,0x7b,0x3b,0xda,0x88,0xd2,0x4a,0x4d,0xb9,0x7c,0x63,0x88,0x6c,0x60,0x4d,0xc7,0xeb,0x17,0x5f,0x48,0x30,0x19,0x3a,0x7a,0x17,0x5c,0x12,0x5a,0xf2,0xab,0x3d,0xb2,0x74,0xd8,0x73,0x5a,0x7b,0xff,0x0f,0xf4,0x09,0xe7,0x37,0xcb,0x1c,0x98,0x04,0x00,0x00
};

httpd_handle_t camera_httpd = NULL;

char filename[40];
int file_number = 0;

 // CAMERA_MODEL_AI_THINKER
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27

#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22

void startCameraServer();

void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();

  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  //init with high specs to pre-allocate larger buffers
  if (psramFound()) {
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  }
   
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }

 //drop down frame size for shorter interval capture
  sensor_t * s = esp_camera_sensor_get();
  s->set_framesize(s, TIMELAPSE_FRAMESIZE);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");

  startCameraServer();

  Serial.print("Camera Ready! Use 'http://");
  Serial.print(WiFi.localIP());
  Serial.println("' to connect");
}

static esp_err_t capture_handler(httpd_req_t *req) {

  camera_fb_t * fb = NULL;
  esp_err_t res = ESP_OK;

  fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Camera capture failed");
    httpd_resp_send_500(req);
    return ESP_FAIL;
  }
  
  file_number++;
  sprintf(filename, "inline; filename=capture_%d.jpg", file_number);
  
  httpd_resp_set_type(req, "image/jpeg");
  httpd_resp_set_hdr(req, "Content-Disposition", filename);

  size_t out_len, out_width, out_height;
  size_t fb_len = 0;
  fb_len = fb->len;
  res = httpd_resp_send(req, (const char *)fb->buf, fb->len);
  esp_camera_fb_return(fb);

  return res;
}

static esp_err_t index_handler(httpd_req_t *req) {
  httpd_resp_set_type(req, "text/html");
  httpd_resp_set_hdr(req, "Content-Encoding", "gzip");
  return httpd_resp_send(req, (const char *)index_html_gz, index_html_gz_len);
}

void startCameraServer() {
  httpd_config_t config = HTTPD_DEFAULT_CONFIG();

  httpd_uri_t index_uri = {
    .uri       = "/",
    .method    = HTTP_GET,
    .handler   = index_handler,
    .user_ctx  = NULL
  };
  httpd_uri_t capture_uri = {
    .uri       = "/capture",
    .method    = HTTP_GET,
    .handler   = capture_handler,
    .user_ctx  = NULL
  };

  if (httpd_start(&camera_httpd, &config) == ESP_OK) {
    httpd_register_uri_handler(camera_httpd, &index_uri);
    httpd_register_uri_handler(camera_httpd, &capture_uri);
  }
}

void loop() {
  // loop not used
  delay(10000);
}
